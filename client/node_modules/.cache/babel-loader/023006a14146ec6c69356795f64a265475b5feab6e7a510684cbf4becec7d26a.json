{"ast":null,"code":"// Importamos la biblioteca Axios para hacer solicitudes HTTP\nimport axios from 'axios';\n\n// Definimos las action types que vamos a usar en el proyecto\nexport const GET_GAMES = 'GET_GAMES';\nexport const GET_GAME = 'GET_GAME';\nexport const GET_ERRORS = 'GET_ERRORS';\nexport const SEARCH_GAME = 'SEARCH_GAME';\nexport const RESET_GAME = 'RESET_GAME';\nexport const GET_GENRES = 'GET_GENRES';\nexport const ADD_GAME = 'ADD_GAME';\nexport const ORDER_NAMES = 'ORDER_NAMES';\nexport const FILTER_GENRES = 'FILTER_GENRES';\nexport const ORDER_RATINGS = 'ORDER_RATINGS';\nexport const FILTER_ORIGIN = 'FILTER_ORIGIN';\nexport const SET_CURRENT_PAGE = 'SET_CURRENT_PAGE';\n\n//Obtener todos los juegos del servidor\nexport const getGames = () => async dispatch => {\n  try {\n    // Hacemos una solicitud GET al servidor\n    const response = await axios.get('http://localhost:3001/videogames');\n    // Si la solicitud es exitosa, llamamos al 'dispatch' para actualizar el estado de la aplicación con los datos de los juegos que se recibieron del servidor (response.data)\n    dispatch({\n      type: GET_GAMES,\n      // Action type\n      payload: response.data // Datos de los juegos\n    });\n  } catch (error) {\n    // Si ocurre algún error durante la solicitud, capturamos el error aquí, luego llamamos al 'dispatch' para manejar el error en la aplicación\n    dispatch({\n      type: GET_ERRORS,\n      // Action type para manejar errores\n      payload: error.message //Objeto con el error\n    });\n  }\n};\n\n//Buscar un juego en el servidor\nexport const searchGame = name => async dispatch => {\n  try {\n    // Hacemos una solicitud GET al servidor\n    const response = await axios.get(`http://localhost:3001/videogames/?name=${name}`);\n    // Si la solicitud es exitosa, llamamos al 'dispatch' para actualizar el estado de la aplicación con los datos de los juegos que se recibieron del servidor (response.data)\n    dispatch({\n      type: SEARCH_GAME,\n      // Action type\n      payload: response.data // Datos de los juegos\n    });\n  } catch (error) {\n    // Si ocurre algún error durante la solicitud, capturamos el error aquí, luego llamamos al 'dispatch' para manejar el error en la aplicación\n    dispatch({\n      type: GET_ERRORS,\n      // Action type para manejar errores\n      payload: error.message //Objeto con el error\n    });\n  }\n};\n\n//Obtener info detallada de un juego\nexport const getGame = id => async dispatch => {\n  try {\n    // Hacemos una solicitud GET al servidor\n    const response = await axios.get(`http://localhost:3001/videogame/${id}`);\n    // Si la solicitud es exitosa, llamamos al 'dispatch' para actualizar el estado de la aplicación con los datos de los juegos que se recibieron del servidor (response.data)\n    dispatch({\n      type: GET_GAME,\n      // Action type\n      payload: response.data // Datos de los juegos\n    });\n  } catch (error) {\n    // Si ocurre algún error durante la solicitud, capturamos el error aquí, luego llamamos al 'dispatch' para manejar el error en la aplicación\n    dispatch({\n      type: GET_ERRORS,\n      // Action type para manejar errores\n      payload: error //Objeto con el error\n    });\n  }\n};\n\n//Obtener todos los géneros del servidor\nexport const getGenres = () => async dispatch => {\n  try {\n    // Hacemos una solicitud GET al servidor\n    const response = await axios.get(`http://localhost:3001/genres/get`);\n    // Si la solicitud es exitosa, llamamos al 'dispatch' para actualizar el estado de la aplicación con los datos de los juegos que se recibieron del servidor (response.data)\n    dispatch({\n      type: GET_GENRES,\n      // Action type\n      payload: response.data // Datos de los juegos\n    });\n  } catch (error) {\n    // Si ocurre algún error durante la solicitud, capturamos el error aquí, luego llamamos al 'dispatch' para manejar el error en la aplicación\n    dispatch({\n      type: GET_ERRORS,\n      // Action type para manejar errores\n      payload: error //Objeto con el error\n    });\n  }\n};\n\n//Agregar un juego al servidor\nexport const addGame = gameData => async dispatch => {\n  try {\n    // Hacemos una solicitud POST al servidor enviando los datos del juego (gameData)\n    const response = await axios.post('http://localhost:3001/videogames/',\n    //URL del servidor\n    gameData,\n    //Datos del juego\n    {\n      headers: {\n        'Content-Type': 'application/json' // Header para especificar que los datos se envían en formato JSON\n      }\n    });\n    //// Si la solicitud es exitosa, llamamos al 'dispatch' para actualizar el estado de la aplicación con los datos del juego que se recibieron del servidor (response.data)\n    dispatch({\n      type: ADD_GAME,\n      payload: response.data\n    });\n    // Si ocurre algún error durante la solicitud, capturamos el error aquí\n    // Luego llamamos al 'dispatch' para manejar el error en la aplicación\n  } catch (error) {\n    dispatch({\n      type: GET_ERRORS,\n      // Action type para manejar errores\n      payload: error //Objeto con el error\n    });\n  }\n};\n\n// Función creadora de acción para restablecer los datos del juego almacenados en el estado a un estado inicial\nexport const resetGame = () => ({\n  type: RESET_GAME,\n  payload: {} // Payload vacío, ya que no se necesita información adicional para esta acción\n});\n\n// Función creadora de acción para ordenar los juegos por nombre\nexport const orderNames = name => ({\n  type: ORDER_NAMES,\n  // Action type\n  payload: name // Payload con el nombre para ordenar\n});\n\n// Función creadora de acción para ordenar los juegos por rating\nexport const orderRating = rating => ({\n  type: ORDER_RATINGS,\n  // Action type\n  payload: rating // Payload con el rating para ordenar\n});\n\n// Función creadora de acción para filtrar los juegos por género\nexport const filterByGenres = genre => ({\n  type: FILTER_GENRES,\n  // Action type\n  payload: genre // Payload con el género para filtrar\n});\n\n// Función creadora de acción para filtrar los juegos por origen (API o DB)\nexport const filterByOrigin = origin => ({\n  type: FILTER_ORIGIN,\n  // Action type\n  payload: origin // Payload con el origen para filtrar\n});\n\n// Función creadora de acción para establecer la página actual\nexport const setCurrentPage = page => {\n  return {\n    type: SET_CURRENT_PAGE,\n    // Action type\n    payload: page // Payload con la página actual\n  };\n};","map":{"version":3,"names":["axios","GET_GAMES","GET_GAME","GET_ERRORS","SEARCH_GAME","RESET_GAME","GET_GENRES","ADD_GAME","ORDER_NAMES","FILTER_GENRES","ORDER_RATINGS","FILTER_ORIGIN","SET_CURRENT_PAGE","getGames","dispatch","response","get","type","payload","data","error","message","searchGame","name","getGame","id","getGenres","addGame","gameData","post","headers","resetGame","orderNames","orderRating","rating","filterByGenres","genre","filterByOrigin","origin","setCurrentPage","page"],"sources":["C:/proyecto-individual/client/src/redux/actions/actions.js"],"sourcesContent":["// Importamos la biblioteca Axios para hacer solicitudes HTTP\r\nimport axios from 'axios'\r\n\r\n// Definimos las action types que vamos a usar en el proyecto\r\nexport const GET_GAMES = 'GET_GAMES'\r\nexport const GET_GAME = 'GET_GAME'\r\nexport const GET_ERRORS = 'GET_ERRORS'\r\nexport const SEARCH_GAME = 'SEARCH_GAME'\r\nexport const RESET_GAME = 'RESET_GAME'\r\nexport const GET_GENRES = 'GET_GENRES'\r\nexport const ADD_GAME = 'ADD_GAME'\r\nexport const ORDER_NAMES = 'ORDER_NAMES'\r\nexport const FILTER_GENRES = 'FILTER_GENRES'\r\nexport const ORDER_RATINGS = 'ORDER_RATINGS'\r\nexport const FILTER_ORIGIN = 'FILTER_ORIGIN'\r\nexport const SET_CURRENT_PAGE = 'SET_CURRENT_PAGE'\r\n\r\n\r\n//Obtener todos los juegos del servidor\r\nexport const getGames = () => async (dispatch) => {\r\n  try {\r\n    // Hacemos una solicitud GET al servidor\r\n    const response = await axios.get('http://localhost:3001/videogames')\r\n    // Si la solicitud es exitosa, llamamos al 'dispatch' para actualizar el estado de la aplicación con los datos de los juegos que se recibieron del servidor (response.data)\r\n    dispatch({\r\n      type: GET_GAMES, // Action type\r\n      payload: response.data, // Datos de los juegos\r\n    })\r\n  } catch (error) {\r\n    // Si ocurre algún error durante la solicitud, capturamos el error aquí, luego llamamos al 'dispatch' para manejar el error en la aplicación\r\n    dispatch({\r\n      type: GET_ERRORS, // Action type para manejar errores\r\n      payload: error.message, //Objeto con el error\r\n    })\r\n  }\r\n}\r\n\r\n//Buscar un juego en el servidor\r\nexport const searchGame = (name) => async (dispatch) => {\r\n  try {\r\n    // Hacemos una solicitud GET al servidor\r\n    const response = await axios.get(\r\n      `http://localhost:3001/videogames/?name=${name}`\r\n    )\r\n    // Si la solicitud es exitosa, llamamos al 'dispatch' para actualizar el estado de la aplicación con los datos de los juegos que se recibieron del servidor (response.data)\r\n    dispatch({\r\n      type: SEARCH_GAME, // Action type\r\n      payload: response.data, // Datos de los juegos\r\n    })\r\n  } catch (error) {\r\n    // Si ocurre algún error durante la solicitud, capturamos el error aquí, luego llamamos al 'dispatch' para manejar el error en la aplicación\r\n    dispatch({\r\n      type: GET_ERRORS, // Action type para manejar errores\r\n      payload: error.message, //Objeto con el error\r\n    })\r\n  }\r\n}\r\n\r\n//Obtener info detallada de un juego\r\nexport const getGame = (id) => async (dispatch) => {\r\n  try {\r\n    // Hacemos una solicitud GET al servidor\r\n    const response = await axios.get(`http://localhost:3001/videogame/${id}`)\r\n    // Si la solicitud es exitosa, llamamos al 'dispatch' para actualizar el estado de la aplicación con los datos de los juegos que se recibieron del servidor (response.data)\r\n    dispatch({\r\n      type: GET_GAME, // Action type\r\n      payload: response.data, // Datos de los juegos\r\n    })\r\n  } catch (error) {\r\n    // Si ocurre algún error durante la solicitud, capturamos el error aquí, luego llamamos al 'dispatch' para manejar el error en la aplicación\r\n    dispatch({\r\n      type: GET_ERRORS, // Action type para manejar errores\r\n      payload: error, //Objeto con el error\r\n    })\r\n  }\r\n}\r\n\r\n//Obtener todos los géneros del servidor\r\nexport const getGenres = () => async (dispatch) => {\r\n  try {\r\n    // Hacemos una solicitud GET al servidor\r\n    const response = await axios.get(`http://localhost:3001/genres/get`)\r\n    // Si la solicitud es exitosa, llamamos al 'dispatch' para actualizar el estado de la aplicación con los datos de los juegos que se recibieron del servidor (response.data)\r\n    dispatch({\r\n      type: GET_GENRES, // Action type\r\n      payload: response.data, // Datos de los juegos\r\n    })\r\n  } catch (error) {\r\n    // Si ocurre algún error durante la solicitud, capturamos el error aquí, luego llamamos al 'dispatch' para manejar el error en la aplicación\r\n    dispatch({\r\n      type: GET_ERRORS, // Action type para manejar errores\r\n      payload: error, //Objeto con el error\r\n    })\r\n  }\r\n}\r\n\r\n//Agregar un juego al servidor\r\nexport const addGame = (gameData) => async (dispatch) => {\r\n  try {\r\n    // Hacemos una solicitud POST al servidor enviando los datos del juego (gameData)\r\n    const response = await axios.post(\r\n      'http://localhost:3001/videogames/', //URL del servidor\r\n      gameData, //Datos del juego\r\n      {\r\n        headers: {\r\n          'Content-Type': 'application/json',  // Header para especificar que los datos se envían en formato JSON\r\n        },\r\n      }\r\n    )\r\n    //// Si la solicitud es exitosa, llamamos al 'dispatch' para actualizar el estado de la aplicación con los datos del juego que se recibieron del servidor (response.data)\r\n    dispatch({\r\n      type: ADD_GAME,\r\n      payload: response.data,\r\n    })\r\n    // Si ocurre algún error durante la solicitud, capturamos el error aquí\r\n    // Luego llamamos al 'dispatch' para manejar el error en la aplicación\r\n  } catch (error) {\r\n    dispatch({\r\n      type: GET_ERRORS, // Action type para manejar errores\r\n      payload: error, //Objeto con el error\r\n    })\r\n  }\r\n}\r\n\r\n// Función creadora de acción para restablecer los datos del juego almacenados en el estado a un estado inicial\r\nexport const resetGame = () => ({\r\n  type: RESET_GAME,\r\n  payload: {}, // Payload vacío, ya que no se necesita información adicional para esta acción\r\n})\r\n\r\n// Función creadora de acción para ordenar los juegos por nombre\r\nexport const orderNames = (name) => ({\r\n  type: ORDER_NAMES, // Action type\r\n  payload: name, // Payload con el nombre para ordenar\r\n})\r\n\r\n// Función creadora de acción para ordenar los juegos por rating\r\nexport const orderRating = (rating) => ({\r\n  type: ORDER_RATINGS, // Action type\r\n  payload: rating, // Payload con el rating para ordenar\r\n})\r\n\r\n// Función creadora de acción para filtrar los juegos por género\r\nexport const filterByGenres = (genre) => ({\r\n  type: FILTER_GENRES, // Action type\r\n  payload: genre, // Payload con el género para filtrar\r\n})\r\n\r\n// Función creadora de acción para filtrar los juegos por origen (API o DB)\r\nexport const filterByOrigin = (origin) => ({\r\n  type: FILTER_ORIGIN, // Action type\r\n  payload: origin, // Payload con el origen para filtrar\r\n})\r\n\r\n// Función creadora de acción para establecer la página actual\r\nexport const setCurrentPage = (page) => {\r\n  return {\r\n    type: SET_CURRENT_PAGE, // Action type\r\n    payload: page, // Payload con la página actual\r\n  }\r\n}\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}